/** @preserve
  * package: sweetalert2-react-content v4.0.1
  * file: dist/sweetalert2-react-content.es.js
  * homepage: https://github.com/sweetalert2/sweetalert2-react-content#readme
  * license: MIT
  **/

import React from 'react';
import ReactDOM from 'react-dom';

const mounts = [{
  key: 'title',
  getter: swal => swal.getTitle()
}, {
  key: 'html',
  getter: swal => swal.getHtmlContainer()
}, {
  key: 'confirmButtonText',
  getter: swal => swal.getConfirmButton()
}, {
  key: 'denyButtonText',
  getter: swal => swal.getDenyButton()
}, {
  key: 'cancelButtonText',
  getter: swal => swal.getCancelButton()
}, {
  key: 'footer',
  getter: swal => swal.getFooter()
}, {
  key: 'closeButtonHtml',
  getter: swal => swal.getCloseButton()
}, {
  key: 'iconHtml',
  getter: swal => swal.getIcon().querySelector('.swal2-icon-content')
}];

const noop = () => {}; // eslint-disable-line @typescript-eslint/no-empty-function


const error = message => new Error("sweetalert2-react-content: ".concat(message));

function withReactContent(ParentSwal) {
  return class extends ParentSwal {
    static argsToParams(args) {
      if ( /*#__PURE__*/React.isValidElement(args[0]) || /*#__PURE__*/React.isValidElement(args[1])) {
        const params = {};
        ['title', 'html', 'icon'].forEach((name, index) => {
          if (args[index] !== undefined) {
            params[name] = args[index];
          }
        });
        return params;
      } else {
        return ParentSwal.argsToParams(args);
      }
    }

    _main(params, mixinParams) {
      params = Object.assign({}, mixinParams, params);
      mounts.forEach(({
        key,
        getter
      }) => {
        if ( /*#__PURE__*/React.isValidElement(params[key])) {
          const reactElement = params[key];
          params[key] = ' ';
          let domElement;
          const openHookName = 'didOpen';
          const superOpenHook = params[openHookName] || noop;

          params[openHookName] = element => {
            domElement = getter(ParentSwal);
            domElement && ReactDOM.render(reactElement, domElement);
            superOpenHook(element);
          };

          const destroyHookName = 'didDestroy';
          const superDestroyHook = params[destroyHookName] || noop;

          params[destroyHookName] = element => {
            superDestroyHook(element);

            if (domElement) {
              ReactDOM.unmountComponentAtNode(domElement);
            }
          };
        }
      });
      return super._main(params, mixinParams);
    }

    update() {
      throw error('Swal.update() is not yet supported. See https://github.com/sweetalert2/sweetalert2-react-content/issues/73');
    }

  };
}

export default withReactContent;
//# sourceMappingURL=sweetalert2-react-content.es.js.map
